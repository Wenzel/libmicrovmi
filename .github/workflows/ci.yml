name: CI

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:

jobs:
  format:
    runs-on: ubuntu-20.04

    steps:
      - name: install stable toolchain with rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt
      - uses: actions/checkout@v1
      - name: rustfmt check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  xen:
    runs-on: ubuntu-20.04

    steps:
      - name: install Xen headers and libraries
        run: sudo apt-get install -y libxen-dev
      - name: install stable toolchain with clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
      - uses: actions/checkout@v1
      - name: build Xen driver
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --features xen
      - name: annotate commit with clippy warnings
        uses: actions-rs/clippy-check@v1
        with:
          name: clippy xen
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --features xen -- -D warnings

  kvm:
    runs-on: ubuntu-20.04

    steps:
      - name: clone libkvmi
        uses: actions/checkout@v2
        with:
          repository: bitdefender/libkvmi
          path: libkvmi
          ref: bf5776319e1801b59125c994c459446f0ed6837e

      - name: build and install libkvmi
        run: |
          ./bootstrap
          ./configure
          make
          sudo make install
        working-directory: libkvmi

      - name: install stable toolchain with clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
      - uses: actions/checkout@v1
      - name: build KVM driver
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --features kvm
      - name: annotate commit with clippy warnings
        uses: actions-rs/clippy-check@v1
        with:
          name: clippy kvm
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --features kvm -- -D warnings
      - name: remove compilation artifacts from stable toolchain
        uses: actions-rs/cargo@v1
        with:
          command: clean
      - name: install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - name: test KVM driver
        uses: actions-rs/cargo@v1
        with:
          command: test
          # The target arg is a workaround in order to prevent build.rs files from being compiled with RUSTFLAGS
          # -Cpanic=abort can lead to issues with bindgen during compile time
          # --lib only unit tests in the library, avoid integration tests
          args: --lib --features kvm --no-fail-fast --target x86_64-unknown-linux-gnu
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
          RUSTDOCFLAGS: '-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests'
      - name: install grcov
        uses: actions-rs/install@v0.1
        with:
          crate: grcov
          version: latest
          use-tool-cache: true
      - name: generate coverage report
        id: coverage
        uses: actions-rs/grcov@v0.1
      - name: upload coverage report to codecov.io
        uses: codecov/codecov-action@v1
        with:
          file: ${{ steps.coverage.outputs.report }}
          flags: unittests
          fail_ci_if_error: true

  virtualbox:
    runs-on: ubuntu-20.04

    steps:
      - name: clone Icebox repository
        run: git clone https://github.com/thalium/icebox --depth 1
      - name: Compile and install FDP library
        run: |
          cd icebox/src/FDP
          g++ -std=c++11 -shared -fPIC FDP.cpp -o libFDP.so
          sudo cp include/* /usr/local/include
          sudo cp libFDP.so /usr/local/lib
      - name: install stable toolchain with clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy
      - uses: actions/checkout@v1
      - name: build VirtualBox driver
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --features virtualbox
      - name: annotate commit with clippy warnings
        uses: actions-rs/clippy-check@v1
        with:
          name: clippy virtualbox
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --features virtualbox -- -D warnings

  c_api:
    runs-on: ubuntu-20.04

    steps:
      - name: install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - uses: actions/checkout@v1

      - name: build libmicrovmi
        uses: actions-rs/cargo@v1
        with:
          command: build

      - name: build C API
        run: |
          cd c_examples
          make

  examples:
    runs-on: ubuntu-20.04
    steps:
      - name: install stable toolchain with clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - uses: actions/checkout@v1

      - name: build examples with clippy
        uses: actions-rs/clippy-check@v1
        with:
          name: clippy examples
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --examples -- -D warnings

  python:
    runs-on: ubuntu-20.04
    steps:
      - name: install stable toolchain with clippy
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy

      - name: Set up Python 3.7 üêç
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'

      - uses: actions/checkout@v1

      - name: install nox and check formatting, linting, type checking and testing
        run: |
          pip install nox
          nox -r
        working-directory: python

      - name: build Python extension
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: -p pymicrovmi

      - name: annotate commit with clippy warnings
        uses: actions-rs/clippy-check@v1
        with:
          name: clippy python
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -p pymicrovmi -- -D warnings

      - name: install Python package
        run: |
          python -m pip install -r requirements.txt
          ./setup.py install
        working-directory: python

      - name: smoke test
        run: python3 -c 'from microvmi import Microvmi, DriverType, DriverInitParam'

      # setup docker cache to speedup rest of the job
      - name: Docker Layer Caching
        uses: satackey/action-docker-layer-caching@v0.0.11

      - name: Build Wheels with manylinux
        run: nox -r -s generate_wheels -- --features xen,kvm,virtualbox --release
        working-directory: python

      # upload all generated wheels *.whl
      - name: upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: python_wheels
          path: python/dist/manylinux/*

  debian_package:
    # create a Debian package with cargo deb
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v1

      - name: install Xen headers
        run: sudo apt-get install -y libxen-dev

      - name: clone Icebox
        uses: actions/checkout@v2
        with:
          repository: thalium/icebox
          path: icebox

      - name: install VirtualBox's FDP headers
        run: |
          g++ -std=c++11 -shared -fPIC FDP.cpp -o libFDP.so
          sudo cp include/* /usr/local/include
          sudo cp libFDP.so /usr/local/lib
        working-directory: icebox/src/FDP

      - name: clone libkvmi
        uses: actions/checkout@v2
        with:
          repository: bitdefender/libkvmi
          path: libkvmi
          ref: bf5776319e1801b59125c994c459446f0ed6837e

      - name: build and install libkvmi
        run: |
          ./bootstrap
          ./configure
          make
          sudo make install
        working-directory: libkvmi

      - name: install cargo deb dependencies
        run: sudo apt-get install -y dpkg liblzma-dev

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo

      - name: install cargo deb
        run: cargo install cargo-deb

      - name: build debian package
        run: cargo deb -- --features xen,kvm,virtualbox

      - name: upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: microvmi_deb
          # microvmi_x.x.x_amd64.deb
          path: target/debian/*

  release:
    # create a Github release
    # only when
    # - push on master
    # - tag starts with 'v*'
    needs: [format, xen, kvm, virtualbox, c_api, examples, python, debian_package]
    runs-on: ubuntu-20.04
    # output these value to be used by other jobs so they can add assets
    outputs:
      upload_url: ${{ steps.step_upload_url.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}

    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v1

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo

      - name: install cargo changelog
        run: cargo install changelog

      - name: generate changelog
        run: changelog -o changelog.md

      - name: Create a Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: ${{ steps.get_version.outputs.version }}
          body_path: changelog.md

      - id: step_upload_url
        run: echo "::set-output name=upload_url::${{ steps.create_release.outputs.upload_url }}"

  release_debian:
    # add the debian package in the Github release
    needs: release
    runs-on: ubuntu-20.04

    steps:
      # the deploy action below depends on a checkout of the repo
      # otherwise it fails trying to remote the 'origin' remote
      # https://github.com/JamesIves/github-pages-deploy-action/issues/335
      - uses: actions/checkout@v2

      # download artifacts
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: microvmi_deb

      - name: get artifact path and name
        id: artefact
        run: |
          PATHNAME=$(find . -maxdepth 1 -name '*.deb')
          NAME=$(basename $PATHNAME)
          echo ::set-output name=path::${PATHNAME}
          echo ::set-output name=name::${NAME}

      - name: Upload Debian package as Release asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.artefact.outputs.path }}
          asset_name: ${{ steps.artefact.outputs.name }}
          asset_content_type: application/vnd.debian.binary-package

  release_book:
    needs: release
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v1

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-mdbook

      - name: install mdbook
        run: cargo install mdbook

      - name: build book
        run: mdbook build doc

      - name: Deploy üöÄ
        uses: JamesIves/github-pages-deploy-action@4.1.0
        with:
          branch: gh-pages
          # note: FOLDER doesn't care about the job's working directory
          folder: doc/book
          single_commit: true

  publish:
    needs: release
    runs-on: ubuntu-20.04

    # publish on crates.io
    # this should be triggered by cargo release, which creates a new tag and pushes to the repo
    # cargo release --no-dev-version --skip-publish minor
    steps:
      - name: Install Xen headers and libraries
        run: sudo apt-get install -y libxen-dev

      - uses: actions/checkout@v1

      - name: Publish
        shell: bash
        run: |
          cargo publish --features xen --token ${{ secrets.CRATES_TOKEN }}


  publish_pypi:
    needs: release
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      # download all wheels into a new manylinux directory
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: python_wheels
          path: manylinux

      - name: Publish on PyPI üöÄ
        uses: pypa/gh-action-pypi-publish@v1.3.1
        with:
          user: __token__
          password: ${{ secrets.PYPI_ACCESS_TOKEN }}
          packages_dir: manylinux
